package TreeNode;

import TreeNode.TreeNode;

// 前序位置的代码在刚刚进入一个二叉树节点的时候执行
// 后续位置的代码在将要离开一个二叉树节点的时候执行
// 中序位置的代码在一个二叉树节点左子树都遍历完, 即将开始遍历右子树的时候执行

// 前中后序位置的代码, 能力依次增强.
// 前序位置只能从函数参数中获取父节点传递的数据, 中序位置还可以获取到左子树通过函数返回值传递回来的数据, 而后续位置则还可以同时获取到左右子树的返回值.

// 二叉树的递归解法可以分两类思路, 第一类是遍历一遍二叉树得出答案(没有返回值, 借助外部变量计算结果), 对应回溯算法
// 第二类是通过分解问题计算出答案(返回子问题的计算结果), 对应动态规划
public class Basic {

    public void traverse(TreeNode root) {
        if (root == null) {
            return;
        }
        // 前序位置
        traverse(root.left);
        // 中序位置
        traverse(root.right);
        // 后续位置
    }
}
